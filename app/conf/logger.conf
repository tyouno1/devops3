# 定义logger模块，root是父类，必须存在的，其他是自定义。
# logging.getLogger(NAME)就相当于向logging模块注册了实例化了
# name 中用. 表示log的继承关系

[loggers]
keys=root,api,web

# [logger_xxxx] logger_模块名称
# level   级别. 有DEBUG, INFO, WARNING, ERROR, CRITICAL
# handlers 处理类. 可以有多个，用逗号分开
# qualname logger 名称, 应用程序通过logging.getLogger 获取，对于不能获取的名称，则记录到root模块
# propagate 是否继承父类的log信息，0：否， 1：是

[logger_root]
level=DEBUG
handlers=root

[logger_api]
handlers=api
qualname=api
propagate=0

[logger_web]
handlers=web
qualname=web
progagate=0

# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter, 上面定义的formatter
# args handler 初始化函数参数

[handlers]
keys=root,api,web

[handler_root]
class=StreamHandler
level=INFO
formatter=fmt01
args=(sys.stderr,)

[handler_api]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=form01
args=('/var/log/api/api.log','a', 10*1024*1024, 5)

[handler_web]
class=handlers.RotatingFileHandler
level=INFO
formatter=fmt01
args=('/var/log/web/web.log','a', 10*1024*1024, 5)

# 日志格式
[formatters]
keys=fmt01

[formatter_fmt01]
format=%(asctime)s %(filename)s-%(funcName)s:[%(lineno)d] %(name)s %(levelname)s %(message)s
datefmt=%d-%b-%Y %H:%M:%S
