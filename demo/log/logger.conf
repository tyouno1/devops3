# 定义logger模块，root是父类，必须存在的，其他是自定义。
# logging.getLogger(NAME)就相当于向logging模块注册了实例化了
# name 中用. 表示log的继承关系

[loggers]
keys=root,example01,example02

# [logger_xxxx] logger_模块名称
# level   级别. 有DEBUG, INFO, WARNING, ERROR, CRITICAL
# handlers 处理类. 可以有多个，用逗号分开
# qualname logger 名称, 应用程序通过logging.getLogger 获取，对于不能获取的名称，则记录到root模块
# propagate 是否继承父类的log信息，0：否， 1：是

[logger_root]
level=DEBUG
handlers=hand01,hand02

[logger_example01]
handlers=hand01,hand02
qualname=example01
propagate=0

[logger_example02]
handlers=hand01,hand03
qualname=example=example02
progagate=0

# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter, 上面定义的formatter
# args handler 初始化函数参数

[handlers]
keys=hand01,hand02,hand03

[handler_hand01]
class=StreamHandler
level=INFO
formatter=form02
args=(sys.stderr,)

[handler_hand02]
class=FileHandler
level=DEBUG
formatter=form01
args=('myapp.log','a')

[handler_hand03]
class=handlers.RotatingFileHandler
level=INFO
formatter=form02
args=('myappl.log','a', 10*1024*1024, 5)

# 日志格式
[formatters]
keys=form01,form02

[formatter_form01]
format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s
datefmt=%a, %d %b %Y %H:%M:%S

[formatter_form02]
format=%(asctime)s %(name)-12s:%(levelname)-8s %(message)s
datefmt=%a, %d %b %Y %H:%M:%S

